!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BasicShaderProgram	BasicShaderProgram.h	/^	BasicShaderProgram()$/;"	f	class:BasicShaderProgram
BasicShaderProgram	BasicShaderProgram.h	/^class BasicShaderProgram$/;"	c
COMMON_FLAGS	makefile	/^COMMON_FLAGS := -pg -g -O0$/;"	m
CUDA_SRCS	makefile	/^CUDA_SRCS := $(shell ls *.cu)$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS := -Wall -lsqlite3 -L\/usr\/lib\/nvidia-367 -lglut -lGLEW -lGLU -lGL -I\/usr\/include$/;"	m
CXXONLYFLAGS	makefile	/^CXXONLYFLAGS :=  -fopenmp -std=c++11$/;"	m
DEF_LOCK	Util.h	29;"	d
DEPS	makefile	/^DEPS := $(SRCS:.cpp=.d) $(CUDA_SRCS:.cu=.d)$/;"	m
GLM_FORCE_RADIANS	UniformVariable.h	27;"	d
GLM_FORCE_RADIANS	glsltest.cpp	26;"	d	file:
NVCC	makefile	/^NVCC := nvcc$/;"	m
NVCC_FLAGS	makefile	/^NVCC_FLAGS :=  -Xcompiler -Wall -Xcompiler -fopenmp$/;"	m
NVCC_LINKS	makefile	/^NVCC_LINKS := -lcuda -lcudart$/;"	m
OBJS	makefile	/^OBJS := $(SRCS:.cpp=.o) $(CUDA_SRCS:.cu=.o)$/;"	m
OBJSTARGET	makefile	/^OBJSTARGET := $(filter-out $(TESTTARGET).o, $(OBJS))$/;"	m
OBJSTEST	makefile	/^OBJSTEST := $(filter-out $(TARGET).o, $(OBJS))$/;"	m
SRCS	makefile	/^SRCS := $(shell ls *.cpp)$/;"	m
Shader	Shader.h	/^	Shader(GLenum t, const char* path):handle(0),type(t),sourcePath(path)$/;"	f	class:Shader
Shader	Shader.h	/^	Shader(GLenum t, const std::string& path):handle(0),type(t),sourcePath(path)$/;"	f	class:Shader
Shader	Shader.h	/^class Shader$/;"	c
ShaderProgram	ShaderProgram.h	/^	ShaderProgram():handle(0)$/;"	f	class:ShaderProgram
ShaderProgram	ShaderProgram.h	/^class ShaderProgram$/;"	c
TARGET	makefile	/^TARGET := $(shell basename `pwd`)$/;"	m
TESTTARGET	makefile	/^TESTTARGET := unittest$/;"	m
Texture2D	Texture2D.h	/^	Texture2D(GLenum u):name(0), unit(u), target(GL_TEXTURE_2D)$/;"	f	class:Texture2D
Texture2D	Texture2D.h	/^class Texture2D$/;"	c
TextureShaderProgram	TextureShaderProgram.h	/^	TextureShaderProgram()$/;"	f	class:TextureShaderProgram
TextureShaderProgram	TextureShaderProgram.h	/^class TextureShaderProgram$/;"	c
UniformVariable	UniformVariable.h	/^class UniformVariable$/;"	c
VAOPositionColorBase	VAOPositionColor.h	/^	VAOPositionColorBase(S& s)$/;"	f	class:VAOPositionColorBase
VAOPositionColorBase	VAOPositionColor.h	/^class VAOPositionColorBase$/;"	c
VAOPositionColorDynamic	VAOPositionColor.h	/^	VAOPositionColorDynamic(S& s):base(s)$/;"	f	class:VAOPositionColorDynamic
VAOPositionColorDynamic	VAOPositionColor.h	/^class VAOPositionColorDynamic$/;"	c
VAOPositionTexture	VAOPositionTexture.h	/^	VAOPositionTexture(S& s, Texture2D& t):$/;"	f	class:VAOPositionTexture
VAOPositionTexture	VAOPositionTexture.h	/^class VAOPositionTexture$/;"	c
VBOBase	VBO.h	/^	VBOBase(GLenum t, GLenum u):handle(0),type(t),usage(u)$/;"	f	class:VBOBase
VBOBase	VBO.h	/^class VBOBase$/;"	c
VBODynamic	VBO.h	/^	VBODynamic():base(GL_ARRAY_BUFFER,GL_DYNAMIC_DRAW),resource(nullptr), device(nullptr)$/;"	f	class:VBODynamic
VBODynamic	VBO.h	/^class VBODynamic$/;"	c
VBOElementDynamic	VBO.h	/^	VBOElementDynamic():base(GL_ELEMENT_ARRAY_BUFFER, GL_DYNAMIC_DRAW), resource(nullptr), device(nullptr)$/;"	f	class:VBOElementDynamic
VBOElementDynamic	VBO.h	/^class VBOElementDynamic$/;"	c
VBOElementStatic	VBO.h	/^	VBOElementStatic():base(GL_ELEMENT_ARRAY_BUFFER, GL_STATIC_DRAW)$/;"	f	class:VBOElementStatic
VBOElementStatic	VBO.h	/^class VBOElementStatic$/;"	c
VBOStatic	VBO.h	/^	VBOStatic():base(GL_ARRAY_BUFFER,GL_STATIC_DRAW)$/;"	f	class:VBOStatic
VBOStatic	VBO.h	/^class VBOStatic$/;"	c
active	Texture2D.h	/^	void active()$/;"	f	class:Texture2D
attach	ShaderProgram.h	/^	void attach(const Shader& s)$/;"	f	class:ShaderProgram
base	VAOPositionColor.h	/^	VAOPositionColorBase<S, VBODynamic, VBOElementDynamic> base;$/;"	m	class:VAOPositionColorDynamic
base	VBO.h	/^	VBOBase<float> base;$/;"	m	class:VBODynamic
base	VBO.h	/^	VBOBase<float> base;$/;"	m	class:VBOStatic
base	VBO.h	/^	VBOBase<unsigned int> base;$/;"	m	class:VBOElementDynamic
base	VBO.h	/^	VBOBase<unsigned int> base;$/;"	m	class:VBOElementStatic
bind	Texture2D.h	/^	void bind()$/;"	f	class:Texture2D
bind	VAOPositionColor.h	/^	void bind()$/;"	f	class:VAOPositionColorBase
bind	VAOPositionColor.h	/^	void bind()$/;"	f	class:VAOPositionColorDynamic
bind	VAOPositionTexture.h	/^	void bind()$/;"	f	class:VAOPositionTexture
bind	VBO.h	/^	void bind()$/;"	f	class:VBOBase
bind	VBO.h	/^	void bind()$/;"	f	class:VBODynamic
bind	VBO.h	/^	void bind()$/;"	f	class:VBOElementDynamic
bind	VBO.h	/^	void bind()$/;"	f	class:VBOElementStatic
bind	VBO.h	/^	void bind()$/;"	f	class:VBOStatic
color	VAOPositionColor.h	/^	VBOClass color;$/;"	m	class:VAOPositionColorBase
compile	Shader.h	/^	void compile()$/;"	f	class:Shader
device	VBO.h	/^	float* device;$/;"	m	class:VBODynamic
device	VBO.h	/^	unsigned int* device;$/;"	m	class:VBOElementDynamic
display	VAOPositionColor.h	/^	void display()$/;"	f	class:VAOPositionColorDynamic
display	VAOPositionColor.h	/^	void display(void)$/;"	f	class:VAOPositionColorBase
display	VAOPositionTexture.h	/^	void display(void)$/;"	f	class:VAOPositionTexture
display	glsltest.cpp	/^void display(void)$/;"	f
element	VAOPositionColor.h	/^	VBOElementClass element;$/;"	m	class:VAOPositionColorBase
element	VAOPositionTexture.h	/^	VBOElementStatic element;$/;"	m	class:VAOPositionTexture
fragShader	BasicShaderProgram.h	/^	Shader fragShader;$/;"	m	class:BasicShaderProgram
fragShader	TextureShaderProgram.h	/^	Shader fragShader;$/;"	m	class:TextureShaderProgram
getColor	VAOPositionColor.h	/^	VBOClass& getColor()$/;"	f	class:VAOPositionColorBase
getColorDevicePointer	VAOPositionColor.h	/^	float* getColorDevicePointer()$/;"	f	class:VAOPositionColorDynamic
getDevicePointer	VBO.h	/^	float* getDevicePointer()$/;"	f	class:VBODynamic
getDevicePointer	VBO.h	/^	unsigned int* getDevicePointer()$/;"	f	class:VBOElementDynamic
getElement	VAOPositionColor.h	/^	VBOElementClass& getElement()$/;"	f	class:VAOPositionColorBase
getElementDevicePointer	VAOPositionColor.h	/^	unsigned int* getElementDevicePointer()$/;"	f	class:VAOPositionColorDynamic
getHandle	Shader.h	/^	GLuint getHandle() const$/;"	f	class:Shader
getHandle	ShaderProgram.h	/^	GLuint getHandle()$/;"	f	class:ShaderProgram
getHandle	VBO.h	/^	GLuint getHandle()$/;"	f	class:VBOBase
getPosition	VAOPositionColor.h	/^	VBOClass& getPosition()$/;"	f	class:VAOPositionColorBase
getPositionDevicePointer	VAOPositionColor.h	/^	float* getPositionDevicePointer()$/;"	f	class:VAOPositionColorDynamic
handle	Shader.h	/^	GLuint handle;$/;"	m	class:Shader
handle	ShaderProgram.h	/^	GLuint handle;$/;"	m	class:ShaderProgram
handle	VAOPositionColor.h	/^	GLuint handle;$/;"	m	class:VAOPositionColorBase
handle	VAOPositionTexture.h	/^	GLuint handle;$/;"	m	class:VAOPositionTexture
handle	VBO.h	/^	GLuint handle;$/;"	m	class:VBOBase
idle	glsltest.cpp	/^void idle(void)$/;"	f
inactive	Texture2D.h	/^	void inactive()$/;"	f	class:Texture2D
init	BasicShaderProgram.cpp	/^void BasicShaderProgram::init(void)$/;"	f	class:BasicShaderProgram
init	Shader.h	/^	void init()$/;"	f	class:Shader
init	Texture2D.cpp	/^void Texture2D::init(const std::string& filepath, int width, int height)$/;"	f	class:Texture2D
init	TextureShaderProgram.cpp	/^void TextureShaderProgram::init(void)$/;"	f	class:TextureShaderProgram
init	VAOPositionColor.h	/^	void init(const std::vector<float>& p, const std::vector<float>& c, const std::vector<unsigned int>& e, GLenum m)$/;"	f	class:VAOPositionColorDynamic
init	VAOPositionColor.h	/^void VAOPositionColorBase<S, VBOClass, VBOElementClass>::init$/;"	f	class:VAOPositionColorBase
init	VAOPositionTexture.h	/^void VAOPositionTexture<S>::init$/;"	f	class:VAOPositionTexture
init	VBO.h	/^	void init(const std::vector<V>& v)$/;"	f	class:VBOBase
init	VBO.h	/^	void init(const std::vector<float>& v)$/;"	f	class:VBODynamic
init	VBO.h	/^	void init(const std::vector<float>& v)$/;"	f	class:VBOStatic
init	VBO.h	/^	void init(const std::vector<unsigned int>& v)$/;"	f	class:VBOElementDynamic
init	VBO.h	/^	void init(const std::vector<unsigned int>& v)$/;"	f	class:VBOElementStatic
initCallbacks	glsltest.cpp	/^void initCallbacks(void)$/;"	f
initScene	glsltest.cpp	/^void initScene(void)$/;"	f
link	ShaderProgram.h	/^	void link()$/;"	f	class:ShaderProgram
location	UniformVariable.h	/^	GLuint location;$/;"	m	class:UniformVariable
main	glsltest.cpp	/^int main(int argc, char** argv)$/;"	f
map	VAOPositionColor.h	/^	void map()$/;"	f	class:VAOPositionColorDynamic
map	VBO.h	/^	void map()$/;"	f	class:VBODynamic
map	VBO.h	/^	void map()$/;"	f	class:VBOElementDynamic
mode	VAOPositionColor.h	/^	GLenum mode;$/;"	m	class:VAOPositionColorBase
mode	VAOPositionTexture.h	/^	GLenum mode;$/;"	m	class:VAOPositionTexture
moveVAO	glsltest.cpp	/^void moveVAO()$/;"	f
mvpMatrix	BasicShaderProgram.h	/^	UniformVariable<glm::mat4> mvpMatrix;$/;"	m	class:BasicShaderProgram
mvpMatrix	TextureShaderProgram.h	/^	UniformVariable<glm::mat4> mvpMatrix;$/;"	m	class:TextureShaderProgram
name	Texture2D.h	/^	GLuint name;$/;"	m	class:Texture2D
position	VAOPositionColor.h	/^	VBOClass position;$/;"	m	class:VAOPositionColorBase
position	VAOPositionTexture.h	/^	VBOStatic position;$/;"	m	class:VAOPositionTexture
projection	glsltest.cpp	/^glm::mat4 projection;$/;"	v
readShaderFile	Shader.h	/^	std::string readShaderFile(const std::string& filename)$/;"	f	class:Shader
resize	glsltest.cpp	/^void resize(int w, int h)$/;"	f
resource	VBO.h	/^	cudaGraphicsResource* resource;$/;"	m	class:VBODynamic
resource	VBO.h	/^	cudaGraphicsResource* resource;$/;"	m	class:VBOElementDynamic
set	UniformVariable.cpp	/^void UniformVariable<glm::mat4>::set(const glm::mat4& m)$/;"	f	class:UniformVariable
set	UniformVariable.cpp	/^void UniformVariable<glm::vec3>::set(const glm::vec3& v)$/;"	f	class:UniformVariable
set	UniformVariable.cpp	/^void UniformVariable<int>::set(const int& i)$/;"	f	class:UniformVariable
setLocation	UniformVariable.h	/^	void setLocation(GLuint program_handle, const char* name)$/;"	f	class:UniformVariable
setLocation	UniformVariable.h	/^	void setLocation(GLuint program_handle, const std::string& name)$/;"	f	class:UniformVariable
setMVPMatrix	BasicShaderProgram.h	/^	void setMVPMatrix(const glm::mat4& m)$/;"	f	class:BasicShaderProgram
setMVPMatrix	TextureShaderProgram.h	/^	void setMVPMatrix(const glm::mat4& m)$/;"	f	class:TextureShaderProgram
setMatrix	glsltest.cpp	/^void setMatrix(void)$/;"	f
shaderProgram	BasicShaderProgram.h	/^	ShaderProgram shaderProgram;$/;"	m	class:BasicShaderProgram
shaderProgram	TextureShaderProgram.h	/^	ShaderProgram shaderProgram;$/;"	m	class:TextureShaderProgram
shaderProgram	VAOPositionColor.h	/^	S& shaderProgram;$/;"	m	class:VAOPositionColorBase
shaderProgram	VAOPositionTexture.h	/^	S& shaderProgram;$/;"	m	class:VAOPositionTexture
sourcePath	Shader.h	/^	std::string sourcePath;\/\/コンストラクタでコンパイルすればメンバとしては不要？$/;"	m	class:Shader
target	Texture2D.h	/^	const GLenum target;$/;"	m	class:Texture2D
tex	glsltest.cpp	/^Texture2D *tex;$/;"	v
texsp	glsltest.cpp	/^TextureShaderProgram *texsp;$/;"	v
texture	VAOPositionTexture.h	/^	Texture2D& texture;$/;"	m	class:VAOPositionTexture
textureCoord	VAOPositionTexture.h	/^	VBOStatic textureCoord;$/;"	m	class:VAOPositionTexture
textureSampler	TextureShaderProgram.h	/^	UniformVariable<int> textureSampler;$/;"	m	class:TextureShaderProgram
tsp	glsltest.cpp	/^BasicShaderProgram *tsp;$/;"	v
type	Shader.h	/^	GLenum type;$/;"	m	class:Shader
type	VBO.h	/^	const GLenum type;$/;"	m	class:VBOBase
unbind	Texture2D.h	/^	void unbind()$/;"	f	class:Texture2D
unbind	VAOPositionColor.h	/^	void unbind()$/;"	f	class:VAOPositionColorBase
unbind	VAOPositionColor.h	/^	void unbind()$/;"	f	class:VAOPositionColorDynamic
unbind	VAOPositionTexture.h	/^	void unbind()$/;"	f	class:VAOPositionTexture
unbind	VBO.h	/^	void unbind()$/;"	f	class:VBOBase
unbind	VBO.h	/^	void unbind()$/;"	f	class:VBODynamic
unbind	VBO.h	/^	void unbind()$/;"	f	class:VBOElementDynamic
unbind	VBO.h	/^	void unbind()$/;"	f	class:VBOElementStatic
unbind	VBO.h	/^	void unbind()$/;"	f	class:VBOStatic
unit	Texture2D.h	/^	const GLenum unit;$/;"	m	class:Texture2D
unmap	VAOPositionColor.h	/^	void unmap()$/;"	f	class:VAOPositionColorDynamic
unmap	VBO.h	/^	void unmap()$/;"	f	class:VBODynamic
unmap	VBO.h	/^	void unmap()$/;"	f	class:VBOElementDynamic
unuse	BasicShaderProgram.h	/^	void unuse()$/;"	f	class:BasicShaderProgram
unuse	ShaderProgram.h	/^	void unuse()$/;"	f	class:ShaderProgram
unuse	TextureShaderProgram.h	/^	void unuse()$/;"	f	class:TextureShaderProgram
usage	VBO.h	/^	const GLenum usage;$/;"	m	class:VBOBase
use	BasicShaderProgram.h	/^	void use()$/;"	f	class:BasicShaderProgram
use	ShaderProgram.h	/^	void use()$/;"	f	class:ShaderProgram
use	TextureShaderProgram.h	/^	void use()$/;"	f	class:TextureShaderProgram
vao	glsltest.cpp	/^BasicShaderProgram::vaoType *vao;$/;"	v
vaoType	BasicShaderProgram.h	/^	typedef VAOPositionColor<BasicShaderProgram> vaoType;$/;"	t	class:BasicShaderProgram
vaoType	TextureShaderProgram.h	/^	typedef VAOPositionTexture<TextureShaderProgram> vaoType;$/;"	t	class:TextureShaderProgram
vaod	glsltest.cpp	/^VAOPositionColorDynamic<BasicShaderProgram> *vaod;$/;"	v
vaot	glsltest.cpp	/^TextureShaderProgram::vaoType *vaot;$/;"	v
vertShader	BasicShaderProgram.h	/^	Shader vertShader;$/;"	m	class:BasicShaderProgram
vertShader	TextureShaderProgram.h	/^	Shader vertShader;$/;"	m	class:TextureShaderProgram
vertexCount	VAOPositionColor.h	/^	int vertexCount;$/;"	m	class:VAOPositionColorBase
vertexCount	VAOPositionTexture.h	/^	int vertexCount;$/;"	m	class:VAOPositionTexture
~Shader	Shader.h	/^	~Shader()$/;"	f	class:Shader
~ShaderProgram	ShaderProgram.h	/^	~ShaderProgram()$/;"	f	class:ShaderProgram
~VBODynamic	VBO.h	/^	~VBODynamic()$/;"	f	class:VBODynamic
~VBOElementDynamic	VBO.h	/^	~VBOElementDynamic()$/;"	f	class:VBOElementDynamic
