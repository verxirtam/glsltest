!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
COMMON_FLAGS	makefile	/^COMMON_FLAGS := -pg -g -O0$/;"	m
CUDA_SRCS	makefile	/^CUDA_SRCS := $(shell ls *.cu)$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS := -Wall -lsqlite3 -L\/usr\/lib\/nvidia-340 -lglut -lGLEW -lGLU -lGL -I\/usr\/include$/;"	m
CXXONLYFLAGS	makefile	/^CXXONLYFLAGS :=  -fopenmp -std=c++11$/;"	m
DEPS	makefile	/^DEPS := $(SRCS:.cpp=.d) $(CUDA_SRCS:.cu=.d)$/;"	m
GLM_FORCE_RADIANS	glsltest.cpp	28;"	d	file:
NVCC	makefile	/^NVCC := nvcc$/;"	m
NVCC_FLAGS	makefile	/^NVCC_FLAGS :=  -Xcompiler -Wall -Xcompiler -fopenmp  -arch=compute_13 -code=sm_13,compute_13$/;"	m
NVCC_LINKS	makefile	/^NVCC_LINKS := -lcuda -lcudart$/;"	m
OBJS	makefile	/^OBJS := $(SRCS:.cpp=.o) $(CUDA_SRCS:.cu=.o)$/;"	m
OBJSTARGET	makefile	/^OBJSTARGET := $(filter-out $(TESTTARGET).o, $(OBJS))$/;"	m
OBJSTEST	makefile	/^OBJSTEST := $(filter-out $(TARGET).o, $(OBJS))$/;"	m
SRCS	makefile	/^SRCS := $(shell ls *.cpp)$/;"	m
Shader	glsltest.cpp	/^	Shader(GLenum t, const char* path):handle(0),type(t),sourcePath(path)$/;"	f	class:Shader
Shader	glsltest.cpp	/^	Shader(GLenum t, const std::string& path):handle(0),type(t),sourcePath(path)$/;"	f	class:Shader
Shader	glsltest.cpp	/^class Shader$/;"	c	file:
ShaderProgram	glsltest.cpp	/^	ShaderProgram():handle(0)$/;"	f	class:ShaderProgram
ShaderProgram	glsltest.cpp	/^class ShaderProgram$/;"	c	file:
TARGET	makefile	/^TARGET := $(shell basename `pwd`)$/;"	m
TESTTARGET	makefile	/^TESTTARGET := unittest$/;"	m
TestShaderProgram	glsltest.cpp	/^	TestShaderProgram()$/;"	f	class:TestShaderProgram
TestShaderProgram	glsltest.cpp	/^class TestShaderProgram$/;"	c	file:
UniformVariable	glsltest.cpp	/^class UniformVariable$/;"	c	file:
UseShaderProgram	glsltest.cpp	/^	UseShaderProgram(ShaderProgram& s):sp(s)$/;"	f	class:UseShaderProgram
UseShaderProgram	glsltest.cpp	/^class UseShaderProgram$/;"	c	file:
attach	glsltest.cpp	/^	void attach(const Shader& s)$/;"	f	class:ShaderProgram
compile	glsltest.cpp	/^	void compile()$/;"	f	class:Shader
display	glsltest.cpp	/^void display(void)$/;"	f
fragShader	glsltest.cpp	/^	Shader fragShader;$/;"	m	class:TestShaderProgram	file:
frag_shader	glsltest.cpp	/^GLuint frag_shader;$/;"	v
getHandle	glsltest.cpp	/^	GLuint getHandle() const$/;"	f	class:Shader
getHandle	glsltest.cpp	/^	GLuint getHandle()$/;"	f	class:ShaderProgram
handle	glsltest.cpp	/^	GLuint handle;$/;"	m	class:Shader	file:
handle	glsltest.cpp	/^	GLuint handle;$/;"	m	class:ShaderProgram	file:
idle	glsltest.cpp	/^void idle(void)$/;"	f
init	glsltest.cpp	/^	void init()$/;"	f	class:Shader	file:
init	glsltest.cpp	/^	void init(void)$/;"	f	class:TestShaderProgram
initCallbacks	glsltest.cpp	/^void initCallbacks(void)$/;"	f
initScene	glsltest.cpp	/^void initScene(void)$/;"	f
initShader	glsltest.cpp	/^void initShader(void)$/;"	f
initShaderProgram	glsltest.cpp	/^void initShaderProgram(void)$/;"	f
link	glsltest.cpp	/^	void link()$/;"	f	class:ShaderProgram
location	glsltest.cpp	/^	GLuint location;$/;"	m	class:UniformVariable	file:
main	glsltest.cpp	/^int main(int argc, char** argv)$/;"	f
mvpMatrix	glsltest.cpp	/^	UniformVariable<glm::mat4> mvpMatrix;$/;"	m	class:TestShaderProgram	file:
program_handle	glsltest.cpp	/^GLuint program_handle;$/;"	v
projection	glsltest.cpp	/^glm::mat4 projection;$/;"	v
readShaderFile	glsltest.cpp	/^	std::string readShaderFile(const std::string& filename)$/;"	f	class:Shader	file:
readShaderFile	glsltest.cpp	/^std::string readShaderFile(const std::string& filename)$/;"	f
resize	glsltest.cpp	/^void resize(int w, int h)$/;"	f
set	glsltest.cpp	/^void UniformVariable<glm::mat4>::set(const glm::mat4& m)$/;"	f	class:UniformVariable
set	glsltest.cpp	/^void UniformVariable<glm::vec3>::set(const glm::vec3& v)$/;"	f	class:UniformVariable
setLocation	glsltest.cpp	/^	void setLocation(GLuint program_handle, const char* name)$/;"	f	class:UniformVariable
setLocation	glsltest.cpp	/^	void setLocation(GLuint program_handle, const std::string& name)$/;"	f	class:UniformVariable
setMatrix	glsltest.cpp	/^void setMatrix(void)$/;"	f
shaderProgram	glsltest.cpp	/^	ShaderProgram shaderProgram;$/;"	m	class:TestShaderProgram	file:
sourcePath	glsltest.cpp	/^	std::string sourcePath;\/\/コンストラクタでコンパイルすればメンバとしては不要？$/;"	m	class:Shader	file:
sp	glsltest.cpp	/^	ShaderProgram& sp;$/;"	m	class:UseShaderProgram	file:
type	glsltest.cpp	/^	GLenum type;$/;"	m	class:Shader	file:
unuse	glsltest.cpp	/^	void unuse()$/;"	f	class:ShaderProgram
unuse	glsltest.cpp	/^	void unuse()$/;"	f	class:TestShaderProgram
use	glsltest.cpp	/^	void use()$/;"	f	class:ShaderProgram
use	glsltest.cpp	/^	void use()$/;"	f	class:TestShaderProgram
vao_handle	glsltest.cpp	/^GLuint vao_handle;$/;"	v
vertShader	glsltest.cpp	/^	Shader vertShader;$/;"	m	class:TestShaderProgram	file:
vert_shader	glsltest.cpp	/^GLuint vert_shader;$/;"	v
~Shader	glsltest.cpp	/^	~Shader()$/;"	f	class:Shader
~ShaderProgram	glsltest.cpp	/^	~ShaderProgram()$/;"	f	class:ShaderProgram
~UseShaderProgram	glsltest.cpp	/^	~UseShaderProgram()$/;"	f	class:UseShaderProgram
